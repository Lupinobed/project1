class Smartphone:  
    def __init__(self, brand, model, storage, battery_life):  
        self.brand = brand          # Brand of the smartphone  
        self.model = model          # Model of the smartphone  
        self._storage = storage     # Storage in GB (using underscore for encapsulation)  
        self._battery_life = battery_life  # Battery life in hours  
    
    def call(self, number):  
        """Simulate making a phone call."""  
        return f"Calling {number} from {self.brand} {self.model}."  

    def text(self, number, message):  
        """Simulate sending a text message."""  
        return f"Sending text to {number}: {message}"  

    def info(self):  
        """Provide information about the smartphone."""  
        return (f"{self.brand} {self.model} with "  
                f"{self._storage}GB storage and "  
                f"{self._battery_life} hours of battery life.")  

    def battery_status(self):  
        """Provide the status of the battery life."""  
        return f"The battery life is {self._battery_life} hours."  


# Create an instance of Smartphone  
my_phone = Smartphone("Samsung", "Galaxy S23", 256, 24)  

# Using the smartphone methods  
print(my_phone.call("123-456-7890"))  
print(my_phone.text("123-456-7890", "Hey there!"))  
print(my_phone.info())  
print(my_phone.battery_status())  

#assignment 2
class Vehicle:  
    def move(self):  
        raise NotImplementedError("Subclasses must implement this method")  

class Car(Vehicle):  
    def move(self):  
        return "Driving üòÑ"  

class Bicycle(Vehicle):  
    def move(self):  
        return "Pedaling üö¥"  

class Plane(Vehicle):  
    def move(self):  
        return "Flying ‚úàÔ∏è"  


# List of vehicles  
vehicles = [Car(), Bicycle(), Plane()]  

# Demonstrate polymorphism  
for vehicle in vehicles:  
    print(vehicle.move())  
